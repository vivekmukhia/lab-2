#include<stdio.h>
#include<stdlib.h>
#include<iostream>
using namespace std;
int count();
void display(struct node *r);
/* Linked List Node */
struct node
{
int data;
struct node *next;
}*head;
/* To Append the Node to next Next new Node*/
void append(int num)
{
struct node *temp,*right;
temp= (struct node *)malloc(sizeof(struct node));
temp->data=num;
right=(struct node *)head;
while(right->next != NULL)
right=right->next;
right->next =temp;
right=temp;
right->next=NULL;
}
/* To insert a new Node */
void add( int num )
{
struct node *temp;
temp=(struct node *)malloc(sizeof(struct node));
temp->data=num;
if(head== NULL)
{
head=temp;
head->next=NULL;
}
else
{
temp->next=head;
head=temp;
}
}
/* To insert at specified location */
void addafter(int num, int loc)
{
int i;
struct node *temp,*left,*right;
right=head;
for(i=1;i<loc;i++)
{
left=right;
right=right->next;
}
temp=(struct node *)malloc(sizeof(struct node));
temp->data=num;
left->next=temp;
left=temp;
left->next=right;
return;
}
/* To add the New new to corresponding location */
void insert(int num)
{
int c=0;
struct node *temp;
temp=head;
if(temp==NULL)
{
add(num);
}
else
{
while(temp!=NULL)
{
if(temp->data<num)
c++;
temp=temp->next;
}
if(c==0)
add(num);
else if(c<count())
addafter(num,++c);
else
append(num);
}
}
/*To delete node from the List */
int delete_n(int num)
{
struct node *temp, *prev;
temp=head;
while(temp!=NULL)
{
if(temp->data==num)
{
if(temp==head)
{
head=temp->next;
free(temp);
return 1;
}
else
{
prev->next=temp->next;
free(temp);
return 1;
}
}
else
{
prev=temp;
temp= temp->next;
}
}
return 0;
}
/* To Display All Nodes present in list */
void display(struct node *r)
{
r=head;
if(r==NULL)
{
return;
}
while(r!=NULL)
{
printf("%d-> ",r->data);
r=r->next;
}
printf("\n");
}
/* To count the number of nodes in the given list */
int count()
{
struct node *n;
int c=0;
n=head;
while(n!=NULL)
{
n=n->next;
c++;
}
return c;
}
/* To sort the Linked List data Elements */
void sort()
{
struct node *ptr, *s;
int value;
if (head == NULL)
{
cout<<"The List is empty"<<endl;
return;
}
ptr = head;
while (ptr != NULL)
{
for (s = ptr->next;s !=NULL;s = s->next)
{
if (ptr->data < s->data)
{
value = ptr->data;
ptr->data = s->data;
s->data = value;
}
}
ptr = ptr->next;
}
}
/* To search an Element in the Linked List */
void Linear_search()
{
int value, pos = 0;
bool flag = false;
if (head == NULL)
{
cout<<"List is empty"<<endl;
return;
}
cout<<"Enter the value to be searched: ";
cin>>value;
struct node *s;
s = head;
while (s != NULL)
{
pos++;
if (s->data == value)
{
flag = true;
cout<<"Element "<<value<<" is found at position "<<pos<<endl;
}
s = s->next;
}
if (!flag)
cout<<"Element "<<value<<" not found in the list"<<endl;  
}
int main()
{
int i,num;
int last_item;
struct node *n;
head=NULL;
while(1)
{
cout<<"\nLinked List Operations\n"<<endl;
cout<<"=========================\n"<<endl;
cout<<"1.Insert"<<endl;
cout<<"2.Display"<<endl;
cout<<"3.Size"<<endl;
cout<<"4.delete_n"<<endl;
cout<<"5.search Element"<<endl;
cout<<"6.Sort the Elements:"<<endl;
cout<<"7.Exit\n"<<endl;
cout<<"Enter your choice:"<<endl;
if(scanf("%d",&i)<=0)
{
cout<<"Enter only an Integer"<<endl;
exit(0);
}
else
{
switch(i)
{
case 1:
cout<<"Enter the number to insert"<<endl;
scanf("%d",&num);
insert(num);
break;
case 2:
if(head==NULL)
{
cout<<"List is Empty"<<endl;
}
else
{
cout<<"Element(s) in the list are:"<<endl;
}
display(n);
break;
case 3:
cout<<"Size of the list is:"<<count()<<endl;
break;
case 4:
if(head==NULL)
cout<<"List is Empty\n"<<endl;
else
{
cout<<"Enter the number to delete_n"<<endl;
scanf("%d",&num);
if(delete_n(num))
cout<<num<<" deleted successfully"<<endl;
else
cout<<num<<"is not found in the list"<<endl;
}
break;
case 5:
Linear_search();
break;
case 6:
sort();
break;
case 7:
return 0;
default:
cout<<"Invalid option"<<endl;
}
}
}
return 0;
}